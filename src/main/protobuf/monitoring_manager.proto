syntax = "proto3";

package monitoring_manager;

message ModelSignature {
  repeated ModelField inputs = 2;
  repeated ModelField outputs = 3;
}

message ModelField {
  string name = 1;

  TensorShape shape = 2;

  DataType dtype = 4;

  DataProfileType profile = 5;
}

enum DataType {
  // Not a legal value for DataType.  Used to indicate a DataType field
  // has not been set.
  DT_INVALID = 0;

  // Data types that all computation devices are expected to be
  // capable to support.
  DT_FLOAT = 1;
  DT_DOUBLE = 2;
  DT_INT32 = 3;
  DT_UINT8 = 4;
  DT_INT16 = 5;
  DT_INT8 = 6;
  DT_STRING = 7;
  DT_INT64 = 9;
  DT_BOOL = 10;
  DT_UINT16 = 17;
  DT_HALF = 19;
  DT_UINT32 = 22;
  DT_UINT64 = 23;
  DT_ANY = 24;
}

enum DataProfileType {
  NONE = 0;

  CATEGORICAL = 1;
  NOMINAL = 11;
  ORDINAL = 12;

  NUMERICAL = 2;
  CONTINUOUS = 21;
  INTERVAL = 22;
  RATIO = 23;

  IMAGE = 3;
  VIDEO = 4;
  AUDIO = 5;
  TEXT = 6;
}

message TensorShape {
  repeated int64 dims = 1;
};

// === END OF contract modeling ===

service PluginManagementService {
  rpc RegisterPlugin(RegisterPluginRequest) returns (RegisterPluginResponse);
}

message RegisterPluginRequest {
  string plugin_id = 1;
  // PLUGIN FRONTEND FIELDS
//  string iconUrl = 2;
  string description = 3;
  string routePath = 5;
  string ngModuleName = 6;
//  string remoteEntry = 7;
  string remoteName = 8;
  string exposedModule = 9;
  // END OF PLUGIN FRONTEND FIELDS
  string addr = 10;
}

message RegisterPluginResponse {
}

service ModelCatalogService {
  rpc GetModelUpdates(GetModelUpdatesRequest) returns (stream GetModelUpdatesResponse);
}

message GetModelUpdatesRequest {
  string plugin_id = 1;
}

message GetModelUpdatesResponse {
  ModelId model = 1;
  ModelSignature signature = 2;
  repeated string training_data_objs = 3;
}

service DataStorageService {
  rpc GetInferenceDataUpdates (stream GetInferenceDataUpdatesRequest) returns (stream GetInferenceDataUpdatesResponse);
}

message GetInferenceDataUpdatesRequest {
  message InitialRequest {
    string plugin_id = 1;
  }

  oneof data {
    InitialRequest init = 1;
    AnalyzedAck ack = 2;
  }
}

message GetInferenceDataUpdatesResponse {
  ModelId model = 1;
  ModelSignature signature = 2;
  repeated string inference_data_objs = 3;
}

message ModelId {
  string model_name = 1;
  uint64 model_version = 2;
}

message AnalyzedAck {
  string plugin_id = 1;
  string model_name = 2;
  uint64 model_version = 3;
  string inference_data_obj = 4;
  repeated RowReport row_reports = 5;
  map<string, FeatureReport> feature_reports = 6;
}

message RowReport {
  uint64 row_id = 1;
  string col = 2;
  string description = 3;
  bool is_good = 4;
  oneof value {
    int64 int_val = 10;
    string string_val = 11;
    double double_val = 12;
    bool bool_val = 13;
  }
}

message FeatureReport {
  repeated FRRow rows = 1;
}

message FRRow {
  string description = 1;
  bool is_good = 2;
}